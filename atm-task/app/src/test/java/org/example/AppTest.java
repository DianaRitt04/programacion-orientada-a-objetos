/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;

class AppTest {

  private Account cuentaAhorro;
  private Account cuentaTransaccion;
  private ATM cajero;

  @BeforeEach
  void setUp() {
    cuentaAhorro = new Account("001", "Rafa", 1000.0, "ahorro");
    cuentaTransaccion = new Account("002", "Luis", 500.0, "transaccion");
    cajero = new ATM();
  }

  @Test
  void testDeposit() {
    cajero.deposit(cuentaAhorro, 200.0);
    assertEquals(1200.0, cuentaAhorro.getAmount(), 0.001,
      "❌ El depósito no actualizó correctamente el saldo. Revisa la lógica del método deposit.");
  }

  @Test
  void testWithdrawSuccess() {
    boolean resultado = cajero.withdraw(cuentaAhorro, 300.0);
    assertTrue(resultado, 
      "❌ El retiro debería ser exitoso pero devolvió false. Verifica las validaciones en withdraw.");
    assertEquals(700.0, cuentaAhorro.getAmount(), 0.001,
      "❌ El saldo después de retirar no es correcto. Asegúrate de restar el monto al saldo.");
  }

  @Test
  void testWithdrawInsufficientFunds() {
    boolean resultado = cajero.withdraw(cuentaTransaccion, 1000.0);
    assertFalse(resultado, 
      "❌ El retiro debería fallar por fondos insuficientes, pero devolvió true.");
    assertEquals(500.0, cuentaTransaccion.getAmount(), 0.001,
      "❌ El saldo cambió a pesar de que no debería por falta de fondos.");
  }

  @Test
  void testTransferSuccess() {
    boolean resultado = cajero.transfer(cuentaAhorro, cuentaTransaccion, 400.0);
    assertTrue(resultado, 
      "❌ La transferencia debería ser exitosa pero devolvió false.");
    assertEquals(600.0, cuentaAhorro.getAmount(), 0.001,
      "❌ El saldo de la cuenta origen no se actualizó correctamente en la transferencia.");
    assertEquals(900.0, cuentaTransaccion.getAmount(), 0.001,
      "❌ El saldo de la cuenta destino no se actualizó correctamente en la transferencia.");
  }

  @Test
  void testTransferInsufficientFunds() {
    boolean resultado = cajero.transfer(cuentaTransaccion, cuentaAhorro, 800.0);
    assertFalse(resultado, 
      "❌ La transferencia debería fallar por falta de fondos, pero devolvió true.");
    assertEquals(500.0, cuentaTransaccion.getAmount(), 0.001,
      "❌ El saldo de la cuenta origen cambió aunque no había fondos suficientes.");
    assertEquals(1000.0, cuentaAhorro.getAmount(), 0.001,
      "❌ La cuenta destino recibió dinero aunque la transferencia debería fallar.");
  }

  @Test
  void testVerCantidad() {
    String info = cajero.verCantidad(cuentaAhorro);
    assertTrue(info.contains("001"),
      "❌ El número de cuenta no aparece en la información mostrada.");
    assertTrue(info.contains("Rafa"),
      "❌ El nombre del dueño no aparece en la información mostrada.");
    assertTrue(info.contains("1000.0"),
      "❌ El saldo no aparece o es incorrecto en la información mostrada.");
    assertTrue(info.contains("ahorro"),
      "❌ El tipo de cuenta no aparece en la información mostrada.");
  }
}
